object BasicBranching

	fn less(a: Int, b: Int): Boolean = {
		a < b
	}

	fn lessOrEqual(a: Int, b: Int): Boolean = {
		a <= b
	}

	fn test1(): Unit = {
		val a: Int = 1;
		val b: Int = a + 1;
		if(less(a, b)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		}
	}

	fn test2(): Unit = {
		val a: Int = 1;
		val b: Int = a + 1;
		if(less(a, 1)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		}
	}

	fn test3(): Unit = {
		val a: Int = 1;
		val b: Int = a + 1;
		if(less(b, a)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		}
	}

	fn test4(): Unit = {
		val a: Int = 1;
		val b: Int = a + 1;
		if(lessOrEqual(a, a)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		}		
	}

	fn test(): Unit = {
		val a: Int = 1;
		val b: Int = a + 1;
		if(less(a, b)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		};

		if(less(a, 1)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		};

		if(less(b, a)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		};

		if(lessOrEqual(a, a)) {
			Std.printString("correct")
		} else {
			Std.printString("not correct")
		}
	}

	test();

	Std.printString("test finished")
end BasicBranching
