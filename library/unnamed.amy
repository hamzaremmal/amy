// Module that should be included every time
// This is a draft of a module that should exist in the Context and every file should have access to it
// This can be implemented after the `use`-statement feature
module unnamed

    // All builtin operators
    infix fn + (lhs : Int, rhs : Int) : Int = { error("Stub Implementation") }
    infix fn - (lhs : Int, rhs : Int) : Int = { error("Stub Implementation") }
    infix fn * (lhs : Int, rhs : Int) : Int = { error("Stub Implementation") }
    infix fn / (lhs : Int, rhs : Int) : Int = { error("Stub Implementation") }
    infix fn % (lhs : Int, rhs : Int) : Int = { error("Stub Implementation") }
    infix fn < (lhs : Int, rhs : Int) : Boolean = { error("Stub Implementation") }
    infix fn <= (lhs : Int, rhs : Int) : Boolean = { error("Stub Implementation") }
    infix fn && (lhs : Boolean, rhs : Boolean) : Boolean = { error("Stub Implementation") }
    infix fn || (lhs : Boolean, rhs : Boolean) : Boolean = { error("Stub Implementation") }
    //infix fn == (lhs : Any, rhs : Any) : Boolean = { error("Stub Implementation") }
    infix fn ++ (lhs : String, rhs : String) : String = { error("Stub Implementation") }

end unnamed